data String = ;
data Void = ;
undefined (A: U): A = error A "undefined";
efq (C : U) : Void -> C = split {};
neg (A : U) : U = A -> Void;
¬ : (A : U) -> U = neg;
const (A : U) (B : U) (a : A) : B -> A = \x -> a;

data Unit = unit : Unit;

data Id (A : U) (a : A) (b : A) = refl : Id A a a;
id (A : U) (a : A) : A = a;

-- Bool stuff
data Bool = true : Bool | false : Bool;
boolToType (A : U) : Bool -> U = split {
    true -> A;
    false -> Void;
};
not : Bool -> Bool = split { true -> false; false -> true };
or  : Bool -> Bool -> Bool = split { true -> \r -> true; false -> id Bool };
and : Bool -> Bool -> Bool = split { true -> id Bool; false -> \r -> false };

-- Nat stuff
data Nat = Z : Nat | S (n : Nat) : Nat;
plus : Nat -> Nat -> Nat = split {
    Z -> λ n -> n ;
    S m -> λ n -> S (plus m n);
};
five : Nat = let tw : Nat = 2 in let thr : Nat = 3 in plus tw thr;

twoPlusTwoEqFour : Id Nat (plus 2 2) 4 = refl;

lt : Nat -> Nat -> Bool = split {
    Z -> split (Nat -> Bool) {
        Z -> false;
        S n -> true;
    };
    S n -> split (Nat -> Bool) {
        Z -> false;
        S m -> lt n m;
    }
};
gtZ : Nat -> U = split { Z -> Void ; S x -> Unit };

-- List stuff
data List (A : U) = Nil : List A | Cons (e : A) (t : List A) : List A;

length (A : U) : List A -> Nat = split {
    Nil -> Z;
    Cons e t -> S (length A t)
};

append (A : U) : List A -> List A -> List A = split {
    Nil -> id (List A);
    Cons x xs -> λ ys -> Cons x (append A xs ys);
};

reverse (A : U) : List A -> List A = split {
    Nil -> Nil;
    Cons x xs -> append A (reverse A xs) (Cons x Nil);
};

map (A : U) (B : U) (f : A -> B) : List A -> List B = split {
    Nil -> Nil;
    Cons x xs -> Cons (f x) (map A B f xs);
};


data Sigma (A : U) (B : A -> U) = Pair (x : A) (y : B x) : Sigma A B;
exists (A : U) (B : A -> U) : U = Sigma A B;
∃ : (A : U) -> (B : A -> U) -> U = exists;
Tuple (A : U) (B : U) : U = Sigma A (\x -> B);
existsNatGtZ : ∃ Nat gtZ = Pair (S Z) (unit);
tuple : Tuple Bool Nat = Pair false (S Z);


data Refinement (A : U) (B : A -> U) = Refine (x : A) (y : B x) : Refinement A B;
-- NonEmpty2 (A : U) : U = Sigma (List A) (\xs -> boolToType (lt Z (length A xs)));
GtZero : U = Refinement (List Bool) (\xs -> gtZ (length Bool xs));

-- Vec stuff
data Vec (n : Nat) (A : U) =
    VNil : Vec Z A |
    VCons (elem : A) (k : Nat) (tail : Vec k A) : Vec (S k) A;

empty : Vec Z Bool = VNil;
single : Vec (S Z) Bool = VCons true (Z) empty;

natOrListBool : Nat -> U = split { Z -> Unit; S n -> List Bool };
u : natOrListBool Z = unit;
lb : natOrListBool (S Z) = Cons true Nil;
explosion (A : U) (a : A) (na : ¬ A) (B : U) : B = efq B (na a);

vfill (A : U) (a : A) : (m : Nat) -> Vec m A = split {
    Z -> VNil;
    S k -> VCons a k (vfill A a k);
};

data Expr = Var : String -> Expr
  | Lit : String -> Expr
  | Con : String -> List Expr -> Expr
  | App : Expr -> Expr -> Expr
  | Lam : String -> Expr -> Expr;

-- quote (A : U) : A -> Expr =